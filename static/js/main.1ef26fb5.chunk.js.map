{"version":3,"sources":["components/Header.js","components/Card.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","score","Card","className","alt","name","src","image","onClick","checkRiderId","id","App","state","allRiders","riders","sort","Math","random","clickedRiderIds","youLose","console","log","_this","setState","keepClicking","clickedId","concat","alreadyClicked","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","_this2","this","components_Header","map","rider","components_Card","key","toString","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"4oBAWeA,MATf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMI,SCIfC,MARf,SAAcL,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,MAAOC,QAAS,kBAAMX,EAAMY,aAAaZ,EAAMa,gBC+DzEC,6MA7DbC,MAAQ,CACNC,UAAWC,EAAOC,KAAK,WAAQ,MAAO,GAAMC,KAAKC,WACjDC,gBAAiB,GACjBjB,MAAO,KAGTkB,QAAU,WACRC,QAAQC,IAAI,aACZC,EAAKC,SAAS,CACZV,UAAWC,EAAOC,KAAK,WAAQ,MAAO,GAAMC,KAAKC,WACjDC,gBAAiB,GACjBjB,MAAO,OAIXuB,aAAe,SAACC,GACdL,QAAQC,IAAI,kBACZC,EAAKC,SAAS,CACZV,UAAWC,EAAOC,KAAK,WAAQ,MAAO,GAAMC,KAAKC,WACjDC,gBAAiBI,EAAKV,MAAMM,gBAAgBQ,OAAOD,GACnDxB,MAAOqB,EAAKV,MAAMX,MAAQ,OAI9BQ,aAAe,SAAAgB,GACb,IAAIE,GAAiB,EADKC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG1B,QAAAC,EAAAC,EAAcX,EAAKV,MAAMM,gBAAzBgB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyC,CAAAI,EAAAM,QAC7Bb,IACRE,GAAiB,IALK,MAAAY,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,GAStBH,EACFL,EAAKH,UAGLG,EAAKE,aAAaC,4EAIb,IAAAgB,EAAAC,KACP,OACE5C,EAAAC,EAAAC,cAAA,OAAKU,GAAG,kBACNZ,EAAAC,EAAAC,cAAC2C,EAAD,CAAQ1C,MAAOyC,KAAK9B,MAAMX,QAC1BH,EAAAC,EAAAC,cAAA,OAAKU,GAAG,UACLgC,KAAK9B,MAAMC,UAAU+B,IAAI,SAAAC,GAAK,OAC7B/C,EAAAC,EAAAC,cAAC8C,EAAD,CACEpC,GAAImC,EAAMnC,GACVqC,IAAKF,EAAMnC,GAAGsC,WACd3C,KAAMwC,EAAMxC,KACZE,MAAOsC,EAAMtC,MACbE,aAAcgC,EAAKhC,0BAtDfwC,aCDlBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1ef26fb5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return(\r\n        <header>\r\n            <h1>MotoGP Clicky Game!</h1>\r\n            <h2>Score: {props.score}</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n        <img alt={props.name} src={props.image} onClick={() => props.checkRiderId(props.id)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\nimport riders from \"./riders.json\";\n\nclass App extends Component {\n\n  state = {\n    allRiders: riders.sort(() => { return 0.5 - Math.random() }),\n    clickedRiderIds: [],\n    score: 0\n  };\n\n  youLose = () => {\n    console.log(\"You lose!\");\n    this.setState({\n      allRiders: riders.sort(() => { return 0.5 - Math.random() }),\n      clickedRiderIds: [],\n      score: 0\n    });\n  }\n\n  keepClicking = (clickedId) => {\n    console.log(\"Keep clicking!\");\n    this.setState({\n      allRiders: riders.sort(() => { return 0.5 - Math.random() }),\n      clickedRiderIds: this.state.clickedRiderIds.concat(clickedId),\n      score: this.state.score + 1\n    });\n  }\n\n  checkRiderId = clickedId => {\n    let alreadyClicked = false;\n    // Check if the clicked ID had already been clicked\n    for (let i of this.state.clickedRiderIds){\n      if (i === clickedId) {\n        alreadyClicked = true;\n      }\n    };\n    // Lose or keep playing, based on the result of the loop above\n    if (alreadyClicked) {\n      this.youLose();\n    }\n    else {\n      this.keepClicking(clickedId);\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"main-container\">\n        <Header score={this.state.score} />\n        <div id=\"riders\">\n          {this.state.allRiders.map(rider => (\n            <Card\n              id={rider.id}\n              key={rider.id.toString()}\n              name={rider.name}\n              image={rider.image}\n              checkRiderId={this.checkRiderId}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}